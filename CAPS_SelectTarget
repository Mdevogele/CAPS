#!/usr/bin/env python

""" CAPS_Phot - Perform the wavelength calibration
    v1.0: 2018-04-19, mdevogele@lowell.edu
"""

from __future__ import print_function
from __future__ import division

from past.utils import old_div
import os, sys
import numpy
import warnings
from tkinter import *
from PIL import Image
from PIL import ImageTk
from PIL import ImageDraw
import argparse
from astropy.io import fits
from scipy.ndimage import interpolation as interp
from scipy.interpolate import InterpolatedUnivariateSpline


from photutils import CircularAperture
from photutils import aperture_photometry
from photutils import CircularAnnulus
from photutils import make_source_mask
from astropy.stats import sigma_clipped_stats


from photutils.datasets import make_4gaussians_image
from photutils import centroid_com, centroid_1dg, centroid_2dg

import time


# self.image = number of the displayed image




class Clicker(object):

    def __init__(self, master, zoom, filelist):
        self.top = master
        self.files = filelist
        self.zoom = zoom
        self.target_index = [None for i in range(len(self.files))]
        self.interp_index = [None for i in range(len(self.files))]
        self.index = 0
        self.images = []
        self.ldac   = []
        self.mjd    = []
        
        self.redcircle = []

        self.JD = []

        ### load image data
        print('please wait, loading images...', end=' ')
        sys.stdout.flush()

        self.read_all_fits(self.files)

        print('done!')

        # create title bar
        self.title = Label(text='%s (%d/%d)' %
                           (self.images[0],
                            self.index+1, len(self.files)))
        self.title.pack()


        # select first image
        self.tkimage = ImageTk.PhotoImage(self.images[0], palette=256)
        self.canvas = Canvas(master, height=self.tkimage.height(), width=
                             self.tkimage.width())
        self.image = self.canvas.create_image(0, 0, anchor='nw',
                                              image=self.tkimage)    

        # create position indicators:
        # green: sources, yellow: inter/extrapolated, red: manually
        # selected
        self.green_circles = []

        self.redcircle_id = self.canvas.create_oval(-100, -100, -100,
                                                    -100, outline='red',
                                                    width=2)
        self.yellowcircle_id = self.canvas.create_oval(-100, -100, -100,
                                                    -100, outline='orange',
                                                       width=1)

        # frame counter variable
        self.evar = IntVar()
        self.evar.set(1)

        self.canvas.pack(side='top', expand=1)

        # display image
        self.nextframe()

        # events
        self.canvas.focus_set()
        self.canvas.bind("<Key>", self.key)
        self.canvas.bind("<Button 1>", self.left_click)
        self.canvas.bind("<Button 3>", self.right_click)


    def left_click(self, event):
        """ select source """
        x, y = old_div(event.x,self.zoom), old_div(event.y,self.zoom)
        
        
        
        self.Select_Target(self.data[self.index],x,y,30)


    def key(self, event):
        """ keyboard events """
        if event.char == 'a':
            # previous frame
            self.nextframe(-1)
        elif event.char == 'd':
            # next frame
            self.nextframe(1)
        elif event.char == 'q':
            # quit
            self.top.quit()
        elif event.char == '+':
            # zoom in
            if self.zoom < 4.:
                self.zoom *= 2
            self.nextframe(0)
        elif event.char == '-':
            # zoom out
            if self.zoom > 0.25:
                self.zoom /= 2
            self.nextframe(0)
        elif event.char == 'z':
            self.Auto_Detect()
        
        elif event.char == 'x':
            self.Show_Targets()
        elif event.char == 'p':
            self.Photometrie()    

    def right_click(self, event):
        """ next frame """
        self.nextframe(1)

    def read_all_fits(self, filenames, zoom=0.5):
        """ read in all image data, scale images """
        self.data=[]
        self.Tx = []
        self.Ty = []
        for idx, filename in enumerate(filenames):
            if idx > 0:
                print('\b\b\b\b%3d' % (idx+1), end=' ')
            else:
                print('%3d' % (idx+1), end=' ')
            sys.stdout.flush()

            self.Tx.append([1385.0146174630074, 1389.1632183587542, 1408.5932392652608, 1416.3528818011403])
            self.Ty.append([1385.0146174630074, 1389.1632183587542, 1408.5932392652608, 1416.3528818011403])
            ## read image data
            hdulist = fits.open(filename, ignore_missing_end=True)
            imgdat = hdulist[0].data
            self.JD.append(hdulist[0].header['MJD-MOBS'])
            self.data.append(imgdat)
            # median = numpy.median(imgdat)
            # std    = numpy.std(imgdat)

            median = numpy.mean(imgdat[270:1170,1200:1300])
            std    = numpy.std(imgdat[270:1170,1200:1300])

            imgdat = old_div(numpy.clip(imgdat, median-0.5*std,
                                median+2*std),(old_div(2.5*std,256)))
            imgdat = imgdat - numpy.min(imgdat)
            imgdat = interp.zoom(imgdat, self.zoom)

            self.images.append(Image.fromarray(imgdat))

    def nextframe(self,i=1, imgnum=-1):
        """ display frame using iterator i"""

        if imgnum == -1:
            self.index += i
        else:
            self.index = imgnum - 1
        if self.index >= len(self.files):
            self.index = 0
        elif self.index < 0:
            self.index = len(self.files) - 1
        filename = self.files[self.index]
        if not os.path.exists(filename):
            print("Unable to find %s" % filename)
            self.top.quit()
        self.evar.set(self.index+1)

        self.title.configure(text='%s (%d/%d)' %
                           (os.path.basename(filename),
                            self.index+1, len(self.files)))

        im = self.images[self.index]

        self.tkimage.paste(im)
        
        #delete previous circles
        for elem in self.redcircle:
            self.canvas.delete(elem)
            
    def Select_Target(self,image,x,y,box):
        
        X = []
        Y = []
        
        #delete previous circles
        for elem in self.redcircle:
            self.canvas.delete(elem)
    
        D = image[int(y)-box:int(y)+box,int(x)-box:int(x)+box]
                
        xn,yn = centroid_com(D-numpy.median(D))
        print(xn,yn)
        xn = xn+int(x)-box
        yn = yn+int(y)-box
        
#        self.redcircle_id = self.canvas.create_oval(x/2-30, y/2-30, x/2+30,
#                                                y/2+30, outline='red',
#                                                    width=2)    
        X.append(xn)
        Y.append(yn)
        
        NX = X[0]+10
        NY = Y[0]+230
        D = image[int(NY)-box:int(NY)+box,int(NX)-box:int(NX)+box]
        xn,yn = centroid_com(D-numpy.median(D))
        xn = xn+int(NX)-box
        yn = yn+int(NY)-box        
        
        X.append(xn)
        Y.append(yn)
 
        NX = X[0]+25
        NY = Y[0]+470
        D = image[int(NY)-box:int(NY)+box,int(NX)-box:int(NX)+box]
        xn,yn = centroid_com(D-numpy.median(D))
        xn = xn+int(NX)-box
        yn = yn+int(NY)-box        
        
        X.append(xn)
        Y.append(yn)
    

        NX = X[0]+35
        NY = Y[0]+700
        D = image[int(NY)-box:int(NY)+box,int(NX)-box:int(NX)+box]
        xn,yn = centroid_com(D-numpy.median(D))
        xn = xn+int(NX)-box
        yn = yn+int(NY)-box
        
        X.append(xn)
        Y.append(yn)
        
        for xe,ye in zip(X,Y):
            self.redcircle.append(self.canvas.create_oval(xe/2-10, ye/2-10, xe/2+10,
                                                ye/2+10, outline='blue',
                                                    width=2))        
            self.redcircle.append(self.canvas.create_oval(xe/2-1, ye/2-1, xe/2+1,
                                                ye/2+1, outline='red',
                                                    width=2))    
        self.Tx[self.index] = X 
        self.Ty[self.index] = Y

    def Auto_Detect(self):
        
        old_index = self.index
        for idx, elem in enumerate(self.data):
            self.nextframe(1)
            print(self.index)
            print(old_index)
            self.Select_Target(self.data[self.index],self.Tx[old_index][0],self.Ty[old_index][0],30)
            old_index = self.index
        
        #print(self.Tx,self.Ty)
        
    def Show_Targets(self):
        self.nextframe(1)


        for xe,ye in zip(self.Tx[self.index],self.Ty[self.index]):
            self.redcircle.append(self.canvas.create_oval(xe/2-10, ye/2-10, xe/2+10,
                                                ye/2+10, outline='blue',
                                                    width=2))        
            self.redcircle.append(self.canvas.create_oval(xe/2-1, ye/2-1, xe/2+1,
                                                ye/2+1, outline='red',
                                                    width=2)) 


       # self.redcircle.append(self.canvas.create_oval(self.Tx[self.index][0]/2-10, self.Ty[self.index][0]/2-10, self.Tx[self.index][0]/2+10,
       #                                         self.Ty[self.index][0]/2+10, outline='blue',
       #                                             width=2))        
       # self.redcircle.append(self.canvas.create_oval(self.Tx[self.index][0]/2-1, self.Ty[self.index][0]/2-1, self.Tx[self.index][0]/2+1,
       #                                         self.Ty[self.index][0]/2+1, outline='red',
       #                                             width=2))           

    def Photometrie(self):
        
        Begin = 10
        End = 50
        q = []
        u = []
        for idx,elem in enumerate(self.data):
            phot = []
            for x,y in zip(self.Tx[self.index],self.Ty[self.index]):
                radii = range(Begin,End)
                positions = [(x, y)]
                apertures = [CircularAperture(positions, r=r) for r in radii]
                annulus_apertures = CircularAnnulus(positions, r_in=30., r_out=40.)
                phot_table = aperture_photometry(self.data[self.index], apertures)
                phot_background = aperture_photometry(self.data[self.index], annulus_apertures)
                bkg_mean = phot_background['aperture_sum'] / annulus_apertures.area()
                Int= []
                Area = []
                Int_bkg1 = []
#                mask = make_source_mask(self.data[self.index], snr=2, npixels=5, dilate_size=11)
#                mean, median, std = sigma_clipped_stats(self.data[self.index], sigma=3.0, mask=mask)    
                
                # 3 because photometry in phot_table start at the indice 3 instead of 0 
                for num in range(3,3+End-Begin):
                    Int.append(phot_table[0][num])
                    Area.append(apertures[num-3].area())
                    Int_bkg1.append(phot_table[0][num] - apertures[num-3].area()*bkg_mean)
    
            
            
                phot.append(Int_bkg1)
                
            filename = self.files[self.index]
            phot = numpy.array(phot)
            qq = (phot[0]-phot[1])/(phot[0]+phot[1])
            q.append(qq.flatten())
            uu = (phot[2]-phot[3])/(phot[2]+phot[3])
            with open(filename +'.txt', 'w') as f:
                for elem3,elem4 in zip(qq,uu):
                    for elem2,elem1 in zip(elem3,elem4):
                        f.write(str(self.JD[self.index]) + '\t' + str(elem2) + '\t' + str(elem1)+ '\n')
            q.append(qq.flatten())
            u.append(uu.flatten())
            self.nextframe(1)
            
            print('Image ' + str(self.index) + ' processed')
            print('Background: ' + str(bkg_mean))

        q = numpy.array(q)
        with open('q', 'w') as f:
            for elem in q:
                for elem2 in elem:
                    f.write(str(self.JD[self.index]) + '\t' + str(elem2) + '\n')

        u = numpy.array(u)
        with open('u', 'w') as f:
            for elem in u:
                for elem2 in elem:
                    f.write(str(self.JD[self.index]) + '\t' + str(elem2) + '\n')

if __name__ == '__main__':
    
    
    # define command line arguments
    parser = argparse.ArgumentParser(description='manual target identification')
    parser.add_argument('-zoom', help='image zoom factor', default=0.5)
    parser.add_argument('images', help='images to process', nargs='+')
    args = parser.parse_args()
    zoom = float(args.zoom)
    filenames = args.images

    root = Tk()
    app = Clicker(root, zoom, filenames)
    root.mainloop()

    outf = open('positions.dat', 'w')
    outf.write('#                                         filename        midtime_JD          RA        Dec\n' +
               '# note that RA and Dec might be based on a fake plate solution and hence are not astrometric\n')
    pass


